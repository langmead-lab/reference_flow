import os
import pandas as pd

configfile: "config.yaml"
# configfile: "config_mouse.yaml"

''' Load from config '''
CHROM = config['CHROM']
INDIV = config['INDIV']
READS1 = config['READS1']
GROUP = config['GROUP']
ALN_MAPQ_THRSD = config['ALN_MAPQ_THRSD']
POP_THRSD = config['POP_THRSD']
POP_STOCHASTIC = config['POP_STOCHASTIC']
POP_BLOCK_SIZE = config['POP_BLOCK_SIZE']
POP_USE_LD = config['POP_USE_LD']

USE_PREBUILT = config['USE_PREBUILT']
SORT_SAM = config['SORT_SAM']

DIR = config['DIR']
GENOME = config['GENOME']
DIR_VCF = config['DIR_VCF']
VCF_PREFIX = config['VCF_PREFIX']
VCF_SUFFIX = config['VCF_SUFFIX']
CHR_PREFIX = config['CHR_PREFIX']
LENGTH_MAP = config['LENGTH_MAP']
CHROM_MAP = config['CHROM_MAP']

FAMILY = config['FAMILY']
SPOP = config['SPOP']
BCFTOOLS = config['BCFTOOLS']
SAMTOOLS = config['SAMTOOLS']
LIFTOVER = config['LIFTOVER']
PYTHON = config['PYTHON']
DIR_SCRIPTS = config['DIR_SCRIPTS']

THREADS = config['THREADS']
RAND_SEED = config['RAND_SEED']
''''''

# Prefixes for filtered VCFs
PREFIX_VCF_F = os.path.join(DIR, '{CHROM}_filtered')

# Bowtie 2 index extensions
IDX_ITEMS = ['1', '2', '3', '4', 'rev.1', 'rev.2']

# Prefixes and directory paths for major-allele reference contruction and indexing
PREFIX_MAJOR_F = os.path.join(DIR, 'major/{CHROM}_filtered_major')
PREFIX_MAJOR = os.path.join(DIR, 'major/chr{CHROM}_maj')
DIR_MAJOR = os.path.join(DIR, 'major')

# Prefixes and directory paths for population reference contruction and indexing
DIR_POP_GENOME = os.path.join(DIR, 'pop_genome/')
POP_DIRNAME = 'thrds{0}_S{1}_b{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
POP_GENOME_SUFFIX = \
    'chr{CHROM}-superpop_{GROUP}_thrds' + str(POP_THRSD) + \
    '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
    '_ld' + str(POP_USE_LD)
WG_POP_GENOME_SUFFIX = \
    'wg-superpop_{GROUP}_thrds' + str(POP_THRSD) + \
    '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
    '_ld' + str(POP_USE_LD)
DIR_POP_GENOME_BLOCK = os.path.join(DIR_POP_GENOME, POP_DIRNAME + '/')
DIR_POP_GENOME_BLOCK_IDX = os.path.join(DIR_POP_GENOME_BLOCK, 'indexes/')

# Prefix and directory paths for experiments
DIR_FIRST_PASS = os.path.join(DIR, 'experiments/{INDIV}/')
DIR_SECOND_PASS = os.path.join(DIR, 'experiments/{INDIV}/' + POP_DIRNAME)
PREFIX_SECOND_PASS = os.path.join(DIR_SECOND_PASS, 'wg-major-' + ALN_MAPQ_THRSD + '-{GROUP}-' + POP_DIRNAME)

# Bias results directory
DIR_RESULTS_BIAS = os.path.join(DIR, 'results/bias')

''' Snakemake modules '''
# Functions
include: '../snakemake/shared/functions.Snakefile'

if not USE_PREBUILT:
    # Prepare pop genome and indexes
    #      check: 'prepare_pop_genome.done'
    include: 'shared/prepare_pop_genome.Snakefile'
    
    # Prepare grc and major genome and indexes
    #      check: 'prepare_standard_genome.done'
    include: 'shared/prepare_standard_genome.Snakefile'

# Align reads to grch major, reference flow, personalized genomes
#      check: 'alignment_refflow.done'
include: 'shared/alignment.Snakefile'

# Elevate and sort reads
#      check: 'elevate.done', 'sort.done'
include: 'shared/elevate_and_sort.Snakefile'

TODO_LIST = ['alignment_refflow.done', 'elevate.done']
if not USE_PREBUILT:
    TODO_LIST.append('prepare_pop_genome.done')
    TODO_LIST.append('prepare_standard_genome.done')
if SORT_SAM:
    TODO_LIST.append('sorting.done')

''' Snakemake rules '''
rule all:
    input:
        expand(os.path.join(DIR, '{task}'), task = TODO_LIST)
        #   # Building genomes
        #   pop_genome = os.path.join(DIR, 'prepare_pop_genome.done'),
        #   standard_genome = os.path.join(DIR, 'prepare_standard_genome.done'),
        #   # Align reads with reference flow
        #   align_refflow = os.path.join(DIR, 'alignment_refflow.done'),
        #   # Elevate alignments to standard reference genome coordinates
        #   elevate = os.path.join(DIR, 'elevate.done'),
        #   # Sort SAMs
        #   sorting = os.path.join(DIR, 'sort.done'),

rule filter_vcf:
    input:
        vcf = os.path.join(DIR_VCF, VCF_PREFIX + '{CHROM}' + VCF_SUFFIX),
        chrom_map = CHROM_MAP
    output:
        vcf = PREFIX_VCF_F + '.vcf'
    shell:
        '{BCFTOOLS} view -r {wildcards.CHROM} -c 1 -f PASS -V mnps,other {input.vcf} | {BCFTOOLS} annotate --rename-chrs {input.chrom_map} -o {output.vcf}'
        # '{BCFTOOLS} view -c 1 -f PASS -V mnps,other {input.vcf} | {BCFTOOLS} annotate --rename-chrs {input.chrom_map} -o {output.vcf}'

rule aggregate_vcf:
    input:
        vcf = expand(os.path.join(DIR, '{CHROM}_filtered.vcf'), CHROM = CHROM)
    output:
        vcf = os.path.join(DIR, 'wg_filtered.vcf')
    shell:
        '{BCFTOOLS} concat -o {output.vcf} {input.vcf}'

rule prepare_chrom_genome:
    input:
        genome = GENOME
    output:
        os.path.join(DIR, 'chr{CHROM}.fa')
    shell:
        '{SAMTOOLS} faidx {input.genome} {CHR_PREFIX}{wildcards.CHROM} > {output};'
